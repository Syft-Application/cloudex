searchNodes=[{"ref":"Cloudex.html","title":"Cloudex","type":"module","doc":"Cloudex takes care of uploading image files or urls to Cloudinary"},{"ref":"Cloudex.html#delete/1","title":"Cloudex.delete/1","type":"function","doc":"Delete an image"},{"ref":"Cloudex.html#delete_prefix/1","title":"Cloudex.delete_prefix/1","type":"function","doc":"Deletes a prefix"},{"ref":"Cloudex.html#start/1","title":"Cloudex.start/1","type":"function","doc":"You can start the GenServer that holds the cloudinary api settings by hand using this function. example start %{api_key: &quot;key&quot;, secret: &quot;s3cr3t&quot;, cloud_name: &quot;heaven&quot;}"},{"ref":"Cloudex.html#upload/2","title":"Cloudex.upload/2","type":"function","doc":"Uploads a (list of) image file(s) and/or url(s) to cloudinary"},{"ref":"Cloudex.html#t:upload_result/0","title":"Cloudex.upload_result/0","type":"type","doc":""},{"ref":"Cloudex.CloudinaryApi.html","title":"Cloudex.CloudinaryApi","type":"module","doc":"The live API implementation for Cloudinary uploading"},{"ref":"Cloudex.CloudinaryApi.html#delete/2","title":"Cloudex.CloudinaryApi.delete/2","type":"function","doc":"Deletes an image given a public id"},{"ref":"Cloudex.CloudinaryApi.html#delete_prefix/2","title":"Cloudex.CloudinaryApi.delete_prefix/2","type":"function","doc":"Deletes images given their prefix"},{"ref":"Cloudex.CloudinaryApi.html#json_result_to_struct/2","title":"Cloudex.CloudinaryApi.json_result_to_struct/2","type":"function","doc":"Converts the json result from cloudinary to a %UploadedImage{} struct"},{"ref":"Cloudex.CloudinaryApi.html#upload/2","title":"Cloudex.CloudinaryApi.upload/2","type":"function","doc":"Upload either a file or url to cloudinary opts can contain: %{resource_type: &quot;video&quot;} which will cause a video upload to occur. returns {:ok, %UploadedFile{}} containing all the information from cloudinary or {:error, &quot;reason&quot;}"},{"ref":"Cloudex.CloudinaryApi.html#url/1","title":"Cloudex.CloudinaryApi.url/1","type":"function","doc":""},{"ref":"Cloudex.DeletedImage.html","title":"Cloudex.DeletedImage","type":"module","doc":"A simple struct that holds the public id of a deleted image response"},{"ref":"Cloudex.EnvOptions.html","title":"Cloudex.EnvOptions","type":"module","doc":"A simple module to get System Environment Variables (ENV VARS)"},{"ref":"Cloudex.EnvOptions.html#merge/1","title":"Cloudex.EnvOptions.merge/1","type":"function","doc":"Pass a Map to merge system variables with. Uses the keys of the map to match the system vars with Examples Cloudex.EnvOptions.merge %{my_env_key: nil} &gt; %{my_env_key: &quot;value from env&quot;}"},{"ref":"Cloudex.EnvOptions.html#merge_missing_settings/1","title":"Cloudex.EnvOptions.merge_missing_settings/1","type":"function","doc":"Same as merge, but only merges settings which have a nil value in the given map"},{"ref":"Cloudex.Settings.html","title":"Cloudex.Settings","type":"module","doc":"This is a GenServer that contains the API settings for cloudinary You can interact with the get function to retreive the settings you want."},{"ref":"Cloudex.Settings.html#child_spec/1","title":"Cloudex.Settings.child_spec/1","type":"function","doc":"Returns a specification to start this module under a supervisor. See Supervisor."},{"ref":"Cloudex.Settings.html#do_start/1","title":"Cloudex.Settings.do_start/1","type":"function","doc":"Helper function to start or restart the GenServer when already started with given settings"},{"ref":"Cloudex.Settings.html#get/0","title":"Cloudex.Settings.get/0","type":"function","doc":"Get the cloudinary credentials as map. Examples iex&gt; Cloudex.Settings.get %{api_key: &quot;my_key&quot;, secret: &quot;my_secret&quot;, cloud_name: &quot;my_cloud_name&quot;}"},{"ref":"Cloudex.Settings.html#get/1","title":"Cloudex.Settings.get/1","type":"function","doc":"Get a specific cloudinary credential by key. Examples iex&gt; Cloudex.Settings.get(:secret) &quot;my_secret&quot; iex&gt; Cloudex.Settings.get(:bogus) nil"},{"ref":"Cloudex.Settings.html#init/1","title":"Cloudex.Settings.init/1","type":"function","doc":"Required by GenServer"},{"ref":"Cloudex.Settings.html#start/1","title":"Cloudex.Settings.start/1","type":"function","doc":"Actually starting the GenServer with given settings"},{"ref":"Cloudex.Settings.html#start/2","title":"Cloudex.Settings.start/2","type":"function","doc":"Called by the supervisor, this will use settings defined in config.exs or ENV vars"},{"ref":"Cloudex.Settings.html#stop/0","title":"Cloudex.Settings.stop/0","type":"function","doc":"Helper function to stop the GenServer"},{"ref":"Cloudex.UploadedImage.html","title":"Cloudex.UploadedImage","type":"module","doc":"A simple struct containing all the information from cloudinary. source public_id version signature width hieght format resource_type created_at tags bytes type etag url secure_url original_filename phash"},{"ref":"Cloudex.UploadedImage.html#t:t/0","title":"Cloudex.UploadedImage.t/0","type":"type","doc":""},{"ref":"Cloudex.Url.html","title":"Cloudex.Url","type":"module","doc":"A module that helps creating urls to your cloudinary image, which can optionally transform the image as well."},{"ref":"Cloudex.Url.html#for/2","title":"Cloudex.Url.for/2","type":"function","doc":"Given a cloudinary public id string, this will generate an image url of where the image is hosted. You can also pass a map with options to apply transformations to the image, for more information see the documentation. examples : An url to the image at its original dimensions and no transformations iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;) &quot;//res.cloudinary.com/my_cloud_name/image/upload/a_public_id&quot; An url to the image with just a signature iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, %{sign_url: true}) &quot;//res.cloudinary.com/my_cloud_name/image/upload/s--MXxhpIBQ--/a_public_id&quot; An url to the image adjusted to a specific width and height iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, %{width: 400, height: 300}) &quot;//res.cloudinary.com/my_cloud_name/image/upload/h_300,w_400/a_public_id&quot; An url to the image using multiple transformation options and a signature iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, %{crop: &quot;fill&quot;, fetch_format: &#39;auto&#39;, flags: &#39;progressive&#39;, width: 300, height: 254, quality: &quot;jpegmini&quot;, sign_url: true}) &quot;//res.cloudinary.com/my_cloud_name/image/upload/s--jwB_Ds4w--/c_fill,f_auto,fl_progressive,h_254,q_jpegmini,w_300/a_public_id&quot; An url to the image using a named transformation iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, %{transformation: &quot;my_transformation&quot;}) &quot;//res.cloudinary.com/my_cloud_name/image/upload/t_my_transformation/a_public_id&quot; An url to a specific version of the image iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, %{version: 1471959066}) &quot;//res.cloudinary.com/my_cloud_name/image/upload/v1471959066/a_public_id&quot; An url to a specific version of the image adjusted to a specific width and height iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, %{width: 400, height: 300, version: 1471959066}) &quot;//res.cloudinary.com/my_cloud_name/image/upload/h_300,w_400/v1471959066/a_public_id&quot; An url to the image with the file extension of the requested delivery format for the resource. The resource is delivered in the original uploaded format if the file extension is not included. iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, %{format: &quot;png&quot;}) &quot;//res.cloudinary.com/my_cloud_name/image/upload/a_public_id.png&quot; An url to the resource type. If resource type not specified, &quot;image&quot; is the default iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, %{resource_type: &quot;video&quot;}) &quot;//res.cloudinary.com/my_cloud_name/video/upload/a_public_id&quot; An url to the resource type with a named transformation. iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, %{resource_type: &quot;video&quot;, transformation: &quot;my_transformation&quot;}) &quot;//res.cloudinary.com/my_cloud_name/video/upload/t_my_transformation/a_public_id&quot; An url with an overlay iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, [ ...&gt; %{border: &quot;5px_solid_rgb:c22c33&quot;, radius: 5, crop: &quot;fill&quot;, height: 246, width: 470, quality: 80}, ...&gt; %{overlay: &quot;my_overlay&quot;, crop: &quot;scale&quot;, gravity: &quot;south_east&quot;, width: 128 ,x: 5, y: 15} ...&gt; ]) &quot;//res.cloudinary.com/my_cloud_name/image/upload/bo_5px_solid_rgb:c22c33,c_fill,h_246,q_80,r_5,w_470/c_scale,g_south_east,l_my_overlay,w_128,x_5,y_15/a_public_id&quot; An url with a face iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, %{width: 400, height: 300, face: true}) &quot;//res.cloudinary.com/my_cloud_name/image/upload/g_face,h_300,w_400/a_public_id&quot; An url with a video codec setting iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, %{resource_type: &quot;video&quot;, video_codec: &quot;h265&quot;}) &quot;//res.cloudinary.com/my_cloud_name/video/upload/vc_h265/a_public_id&quot; An url with zoom applied to a face iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, %{zoom: 1.3, face: true, crop: &quot;crop&quot;, version: 1471959066}) &quot;//res.cloudinary.com/my_cloud_name/image/upload/c_crop,g_face,z_1.3/v1471959066/a_public_id&quot; An url retaining aspect ratio iex&gt; Cloudex.Url.for(&quot;a_public_id&quot;, %{aspect_ratio: 2.5, width: 400, height: 300, version: 1471959066}) &quot;//res.cloudinary.com/my_cloud_name/image/upload/ar_2.5,h_300,w_400/v1471959066/a_public_id&quot;"}]